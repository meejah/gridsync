[tox]
envlist = py{39},lint
skip_missing_interpreters = True

[testenv]
usedevelop = True
install_command = python -m pip install --no-deps {opts} {packages}
setenv =
    pyqt5: QT_API=pyqt5
    pyqt6: QT_API=pyqt6
    pyside2: QT_API=pyside2
    pyside6: QT_API=pyside6
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/test.txt
commands =
    python -m pytest {posargs}
passenv = *

[testenv:lint]
usedevelop = True
basepython = python3.9
install_command = python -m pip install --no-deps {opts} {packages}
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/lint.txt
commands =
    black --line-length=79 --check --diff setup.py gridsync tests
    isort --line-length=79 --check --diff setup.py gridsync tests
    {envpython} {toxinidir}/scripts/mypy-wrapper.py gridsync
    flake8 setup.py gridsync tests
    pylint --reports=no gridsync

[testenv:pyinstaller-tahoe]
usedevelop = True
skip_install = True
install_command = {envpython} scripts/reproducible-pip.py install --no-deps {opts} {packages}
deps =
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/tahoe-lafs.txt
setenv =
    PYTHONHASHSEED=1
commands =
    pip list
    {envpython} -m pip check
    pyinstaller -y pyinstaller.spec

[testenv:pyinstaller-magic-folder]
usedevelop = True
skip_install = True
install_command = {envpython} scripts/reproducible-pip.py install --no-deps {opts} {packages}
deps =
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/magic-folder.txt
setenv =
    PYTHONHASHSEED=1
commands =
    pip list
    {envpython} -m pip check
    pyinstaller -y pyinstaller.spec

[testenv:pyinstaller-gridsync]
usedevelop = True
install_command = {envpython} scripts/reproducible-pip.py install --no-deps {opts} {packages}
deps =
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
setenv =
    PYTHONHASHSEED=1
commands =
    pip list
    {envpython} -m pip check
    pyinstaller -y pyinstaller.spec

[testenv:pyinstaller]
usedevelop = True
install_command = {envpython} scripts/reproducible-pip.py install --no-deps {opts} {packages}
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/tahoe-lafs.txt
    -r{toxinidir}/requirements/magic-folder.txt
setenv =
    PYTHONHASHSEED=1
commands =
    pip list
    {envpython} -m pip check
    pyinstaller -y pyinstaller.spec


[testenv:integration]
usedevelop = True
basepython = python3.9
install_command = python -m pip install --no-deps {opts} {packages}
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/test.txt
commands =
    python -m pytest tests/integration


[testenv:update-hashes]
basepython = python3.9
skip_install = True
install_command = python -m pip install {opts} {packages}
deps =
    pip-tools
    hashin
commands =
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/gridsync-base.txt requirements/gridsync.in
    hashin --update-all -r requirements/gridsync-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/tahoe-lafs-base.txt requirements/tahoe-lafs.in
    hashin --update-all -r requirements/tahoe-lafs-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/magic-folder-base.txt requirements/magic-folder.in
    hashin --update-all -r requirements/magic-folder-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyinstaller-base.txt requirements/pyinstaller.in
    hashin --update-all -r requirements/pyinstaller-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/test.txt requirements/test.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/lint.txt requirements/lint.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/dmgbuild.txt requirements/dmgbuild.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyqt5.txt requirements/pyqt5.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyqt6.txt requirements/pyqt6.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyside2.txt requirements/pyside2.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyside6.txt requirements/pyside6.in

[testenv:update-github-repo]
basepython = python3.9
skip_install = True
install_command = python -m pip install {opts} {packages}
deps =
    httpx
commands =
    {envpython} {toxinidir}/scripts/update-github-repo {posargs}


[flake8]
ignore = E203, E265, E402, E501, N802, W503
exclude = scripts/*, misc/*,
max-complexity = 10

[pytest]
testpaths = tests
addopts = -rs -s -m "not slow" --ignore=tests/integration --cov-config=tox.ini --cov-append --cov-report=html --cov=gridsync

# .coveragerc
[run]
omit = gridsync/_version.py
